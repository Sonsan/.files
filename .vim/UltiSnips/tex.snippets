global !p
# Source: https://github.com/gillescastel/latex-snippets
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]
texIgnoreMathZones = ['texMathText']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]
def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal


# Explanation:
# snippet $SNIPPETNAME "$DESCRIPTION" $OPTIONS
#	`$STUFF`
# endsnippet
#
# The $OPTIONS are:[(b, "only expand when at column 0"),
#                   (i, "also expand when inside a word"),
#					(w, "opposite of i"),
#					(r, "snippet uses regular expression"),
#					(t, "no tab-expansion"),
#					(A, "snippet will expand automatically")]

# Document Templates
snippet template "Basic template" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[ngerman]{babel}

\usepackage{amsmath, amssymb}
\usepackage{import}
\usepackage{graphicx}

\begin{document}
	$0
\end{document}
endsnippet


# Enviroments
snippet beg "enviroment" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet table "Inserts Table Enviroment" b
\begin{table}[$(1:htpb)]
	\centering
	\begin{tabular}{${5:c}}
		$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
	\caption{${2:caption}}
\end{table}
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "display math" wA
\[
${1:${VISUAL}}
\] $0
endsnippet

snippet ali "Align" bA
\begin{align}
	${1:${VISUAL}}
\end{align}
endsnippet

snippet eq "Equation" bA
\begin{equation*}
	${1:${VISUAL}}
\end{equation*}
endsnippet

snippet fig "Figure" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

# MISC
snippet tex "LaTeX" w
\LaTeX
endsnippet

snippet sec "section" b
\section{$1}
\label{sec:${2:$1}}
$0
endsnippet

snippet sub "subsection" b
\subsection{$1}
\label{subsec:${2:$1}}
$0
endsnippet

snippet ssub "subsubsection" b
\subsubsection{$1}
\label{ssubsec:${2:$1}}
$0
endsnippet

# Math
context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

context "math()"
snippet => "Implication" Au
\implies $0
endsnippet

context "math()"
snippet lra "Equivalent <=>" wA
\Leftrightarrow $0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

snippet == "Equals" iA
&= $1 \\\\
endsnippet

snippet	!= "not equal" iA
\neq
endsnippet

context "math()"
snippet () "\left( \right)" iw
\left( ${VISUAL} \right) $0
endsnippet

context "math()"
snippet [] "\left[ \right]" iw
\left[ ${VISUAL} \right] $0
endsnippet

context "math()"
snippet {} "\left\{ \right\}" iw
\left\\{ ${VISUAL} \right\\} $0
endsnippet

context "math()"
snippet sum "sum" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} $0
endsnippet

context "math()"
snippet prod "product" w
\prod_{${1:k}=${2:1}}^{${3:\infty}} $0
endsnippet

context "math()"
snippet taylor "taylor series" w
\sum_{${1:k}=${2:0}}^{${3:n}} \frac{f^{($1)(a)}}{$1!}(x-a)^$1
endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}}
endsnippet

context "math()"
snippet limsup "limes superior" w
\limsup_{${1:n} \to ${2: \infty}}
endsnippet

context "math()"
snippet liminf "limes inferior" w
\liminf_{${1:n} \to ${2: \infty}}
endsnippet

context "math()"
snippet dx "dx" wA
\mathrm{d}x
endsnippet

context "math()"
snippet ddx "d/dx" wA
\frac{\mathrm{d}}{\mathrm{d}x}
endsnippet

context "math()"
snippet AA "forall" iA
\forall
endsnippet

context "math()"
snippet EE "exists" iA
\exists
endsnippet

context "math()"
snippet xx "times" iA
\times
endsnippet

priority 100
context "math()"
snippet ** "cdot" iA
\cdot
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|tan|arcot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet ,, "comma space" iA
,\: $0
endsnippet

context "math()"
snippet nabl "nabla" i
\nabla$0
endsnippet

context "math()"
snippet oo "infinity" iA
\infty $0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet tt "text" iA
\text{ ${VISUAL} }$0
endsnippet

# Postfix Stuff
priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet "(\\?\w+)(,\.|\.,)" "Vector Postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet
