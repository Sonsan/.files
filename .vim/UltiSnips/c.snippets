# Explanation:
# snippet $SNIPPETNAME "$DESCRIPTION" $OPTIONS
#   `$STUFF`
# endsnippet
#
# The $OPTIONS are:[(b, "only expand when at column 0"),
#                   (i, "also expand when inside a word"),
#                   (w, "opposite of i"),
#                   (r, "snippet uses regular expression"),
#                   (t, "no tab-expansion"),
#                   (A, "snippet will expand automatically")]

snippet docs "documentation" bA
/**
* File:        ${1:`!p snip.rv = snip.fn`}
* Date:        `date +%d.%m.%y`
* Author:      ${2:`echo $NAME`}
* Matrikelnr.: $3
* e-mail:      sterz@stud.uni-frankfurt.de
* Description: $4
**/
$0
endsnippet

snippet main "int main() ..." bA
int main(int argc, char **argv)
{
	${1:/* code */}
	return 0;
}
endsnippet

snippet inc "include" bA
#include <${1:stdio}.h>
$0
endsnippet

snippet Inc "include" bA
#include "${1:`!p snip.rv = snip.fn`}.h"

snippet Def "#ifndef #define #endif" bA
#ifndef $1
#define ${1:SYMBOL} ${2:VALUE}
#endif $3
$0
endsnippet

snippet def "#define" bA
#define $0
endsnippet

snippet td "typedef" b
typedef ${1:int} ${2:TypeName};$0
endsnippet

snippet st "struct" b
struct ${1:StructName} {
	$2
};$0
endsnippet

snippet tds "typedef struct" b
typedef struct ${1:StructName} {
	${2:/* code */}
} ${3:$1};$0
endsnippet

snippet for "for() .." bA
for(${1:int} ${2:i}=${3:0}; ${4:$2}; ${5:$2}++) {
	$6
}$0
endsnippet

snippet pri "print('')" w
printf("${1:%d}\n", $2);$0
endsnippet

snippet switch "switch" bA
switch($1) {
	case $2:
		$3
		break;
	$4
	default:
		$5
}
endsnippet

snippet case "case" w
case $1:
	$2
	break;
$0
endsnippet

snippet fun "function" bA
${1:void} ${2:function_name}($3)
{
	${4:/* code */}
}
endsnippet

snippet cc "comment" bA
/* ${1:comment} */$0
endsnippet
